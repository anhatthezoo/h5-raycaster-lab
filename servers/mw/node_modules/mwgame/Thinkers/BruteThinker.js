/**
 * Un thinker de base pour toute les créatures avec une IA
 */
var O2 = require('o2');
var CreatureThinker = require('./CreatureThinker.js');
var u = require('mwgame/Utils.js');

var BruteThinker = O2.extendClass(CreatureThinker, {

	// Example : init -> branching on another thinker
	thinkInit: function() {
		this.setThink('RandomWalk');
	},
	
	// 1 mode wander
	// 2 if foe visible then : aim, walk
	// 4 if close enough : strike
	// 5 if too close : step back
	

	// Example : MODE RANDOM WALK & WANDER
	thinkRandomWalk_enter: function() {
		this.setActionTime(30);
		var oEntity = this.oEntity;
		oEntity.a = u.rand(0, 7) * Math.PI / 4;
		oEntity.setSpeedVector(oEntity.a, oEntity.oBlueprint.speed);
	},

	thinkRandomWalk: function() {
		this.thinkMove();
		if (this.testActionTimeOut()) {
			this.setThink('Wait30');
		}
	},
	
	thinkRandomWalk_exit: function() {
		var oEntity = this.oEntity;
		oEntity.setSpeedVector(oEntity.a, 0);
	},
	
	// WAIT MODE 30
	thinkWait30_enter: function() {
		this.setActionTime(30);
	},
	
	thinkWait30: function() {
		if (this.testHostileVisible()) {
			this.setThink('Follow');
		}
		if (this.testActionTimeOut()) {
			this.setThink('RandomWalk');
		}
	},
		


	thinkFollow_enter: function() {
		this.setActionTime(10);
		var oEntity = this.oEntity;
		var oTarget = this.getTarget();
		oEntity.a = this.getEntityAngle(oTarget);
		oEntity.setSpeedVector(oEntity.a, oEntity.oBlueprint.speed);
	},
	
	thinkFollow: function() {
		this.thinkMove();
		var bHostileVisible = this.testHostileVisible();
		if (bHostileVisible) {
			if (this.testCloseEnough()) {
				this.setThink('Attack');
			}
		} 
		if (this.testActionTimeOut()) {
			if (bHostileVisible) {
				this.setThink('Follow');
			} else {
				this.setThink('RandomWalk');
			}
		}
	},
	
	thinkFollow_exit: function() {
		this.actionStop();
	},
	
	
	// STRIKE
	// ATTACK MODE 
	thinkAttack_enter: function() {
		this.actionAim(); // we aim
		this.setActionTime(8); // aiming for 8 units of time
	},
	
	thinkAttack: function() {
		if (this.testActionTimeOut()) {
			this.setThink('Strike'); // just before striking
		}
	},
	
	thinkStrike_enter: function() {
		this.actionAim(); // we aim a last time
		this.actionAttack(); // we strike
		this.setActionTime(10); // 10 unit of time of recovery
	},
	
	thinkStrike: function() {
		if (this.testActionTimeOut()) {
			if (this.testCloseEnough()) {
				this.setThink('Strike'); // shoot again
			} else { // too far
				this.setThink('Follow'); // follow
			}
		}
	},

	

	// target is close enough to be stroke
	testCloseEnough: function() {
		var oTarget = this.getTarget();
		return oTarget && this.distanceTo(oTarget) < 64;
	},
	
});

module.exports = BruteThinker;
