var CONST = require('./data/consts.js');
var aTypes = ['', 'mob', 'player', 'thing', 'missile', 'item'];

function buildTable(aData, sTitle, bClickable) {
	return '<table class="inspector"><caption>' + sTitle + '</caption><tbody>' +
	aData.map(function(row, iRow) {
		var sTag = 't' + (iRow === 0 ? 'h' : 'd');
		var sClass = '';
		if (iRow === 0) {
			sClass = 'head';
		} else if (bClickable) {
			sClass = 'link';
		}
		if (sClass !== '') {
			sClass = ' class="' + sClass + '"';
		}
		return '<tr' + sClass + '><' + sTag + '>' + row.join('</' + sTag + '><' + sTag + '>') + '</' + sTag + '></tr>';
	}).join('') + '</tbody></table>';
}



function inspectInstances(oGame) {
	var aInstances = oGame._aInstances.filter(function(oInst) {
		return !!oInst;
	});
	aData = aInstances.map(function(oInst) {
		var aClients = oInst.getClientEntities() || [];
		return [oInst.getId(), oInst.getName(), aClients.length];
	});
	aData.unshift(['id', 'name', 'players']);
	return buildTable(aData, 'list of instances', true);
}

function inspectInstance(oGame, iInst) {
	var oInstance = oGame._aInstances[iInst];
	var aEntities = oInstance.getEntities().filter(function(oEntity) {
		return !!oEntity;
	});
	var getTimeStr = function(nTime) {
		var nSec = nTime % 60;
		var nMin = (nTime / 60 | 0) % 60;
		var nHou = nTime / 3600 | 0;
		var sTime = nSec.toString() + 's';
		if (nMin) {
			sTime = nMin.toString() + 'min ' + sTime;
		}
		if (nHou) {
			sTime = nHou.toString() + 'h ' + sTime;
		}
		return sTime;
	};
	var getNum10 = function(n) {
		return n < 10 ? '0' + n.toString() : n.toString();
	};
	var getDateStr = function(d) {
		var day = getNum10(d.getDate());
		var mon = getNum10(d.getMonth() + 1);
		var yea = d.getFullYear().toString();
		var hou = getNum10(d.getHours());
		var min = getNum10(d.getMinutes());
		return yea+'-'+mon+'-'+day+' '+hou+':'+min;
	};
	var aDataClients = aEntities.map(function(oEntity) {
		return [
		        oEntity.getId(), 
		        oEntity.getData('name'), 
		        aTypes[oEntity.getType()], 
		        oEntity.sBlueprint, 
		        getTimeStr(oInstance.getTime() - oEntity.getCreationTime())
		];
	});
	aDataClients.unshift(['id', 'name', 'type', 'blueprint', 'time']);
	var n24 = (Date.now() / 3600000 | 0) - 24;
	var aDataCnx = oGame._aConnectionLog.map(function(aEntry) {
		var sName = aEntry[0];
		var nCnxTime = aEntry[1] / 3600000 | 0;
		var dCnx = new Date(aEntry[1]);
		var sDurTime = getTimeStr((aEntry[2] - aEntry[1]) / 1000 | 0);
		return [nCnxTime, getDateStr(dCnx), sName, sDurTime];
	}).filter(function(aEntry) {
		return aEntry[0] >= n24;
	}).map(function(aEntry) {
		return [aEntry[1], aEntry[2], aEntry[3]];
	});
	aDataCnx.unshift(['date/time', 'name', 'duration']);
	return buildTable(aDataClients, 'list of entities', true) + buildTable(aDataCnx, 'connection log', false);
}

function inspectEntityAttributes(oEntity) {
	if (!oEntity.getSoul()) {
		return;
	}
	var a = oEntity.getSoul().getAttributes();
	var d = [];
	for (var sAttr in a) {
		d.push([sAttr, a[sAttr]]);
	}
	if (d.length) {
		d.unshift(['attribute', 'value']);
	}
	return d;
}

function inspectEntityEffects(oEntity, nTime) {
	if (!oEntity.getSoul()) {
		return;
	}
	var a = oEntity.getSoul().getEffects().map(function(oEffect) {
		var sDur = '';
		switch (oEffect.getDurationType()) {
			case 0: // instant
				sDur = '';
				break;
				
			case 1: // normal
				sDur = (oEffect._nExpirationTime - nTime).toString() + 's';
				break;
				
			default: // perm
				sDur = 'âˆž';
		}
		return [oEffect.getTags().join(' '), oEffect.getLevel(), sDur];
	});
	if (a.length) {
		a.unshift(['effect', 'lvl', 'dur']);
	}
	return a;
}

function inspectEntityInventory(oEntity) {
	var aItems;
	var oInv = oEntity.getData('inventory');
	if (oInv) {
		aItems = oInv.getBagItems().map(function(oItem) {
			return [oItem.resref, oItem.type];
		});
		aItems.unshift(['item', 'type']);
		return aItems;
	}
	return [];
}

function inspectEntity(oInstance, iEnt) {
	// nom type blueprint
	// attributs
	// effets
	// inventaire
	var oEntity = oInstance.getEntity(iEnt);
	var d1 = [['id', 'name', 'type', 'blueprint'], [oEntity.getId(), oEntity.getData('name'), aTypes[oEntity.getType()], oEntity.sBlueprint]];
	var d2 = inspectEntityAttributes(oEntity);
	var d3 = inspectEntityEffects(oEntity, oInstance.getTime());
	var d4 = inspectEntityInventory(oEntity);
	return buildTable(d1, 'properties', false) + buildTable(d2, 'attributes', false) + buildTable(d3, 'effects', false) + buildTable(d4, 'inventory', false);
}

/**
 * Main inspector function
 * @param oGame instance of MWGame
 * @param oParams Parameters
 * @return string
 */
function inspect(oGame, oParams) {
	try {
		var sHTML = '';
		switch (oParams.a) {
			case 'inst': // details of an instance
				sHTML = '<div class="title">instance #' + oParams.i + '</div>' + inspectInstance(oGame, oParams.i); // rendering list of instances
				break;
			
			case 'ent': // details of an instance
				sHTML = '<div class="title">entity #' + oParams.e + '</div>' + inspectEntity(oGame.getInstance(oParams.i), oParams.e); // rendering list of instances
				break;
			
			default: // default view
				sHTML = '<div class="title">instances</div>' + inspectInstances(oGame); // rendering list of instances
				break;
		}
		return '<div class="report">' + sHTML + '</div>';
	} catch (e) {
		return '<div class="error">' + e.toString() + '</div>';
	}
}


module.exports = {
	inspect: inspect
};
