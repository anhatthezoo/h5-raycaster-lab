/**
 * fonctions d'aide au débuggage
 */
 
var O2 = require('o2');
var Effect = require('./Effects.js');

O2.createClass('MW.Debuggy', {
	
	bActive: false,
	
	command: function(oInstance, oEntity, sMessage) {
		if (this.bActive) {
			var a = sMessage.split(' ');
			var sMeth = 'cmd_' + a.shift();
			a.unshift(oEntity);
			a.unshift(oInstance);
			if (sMeth in this) {
				this[sMeth].apply(this, a);
			}
		}
	},
	
	/**
	 * Donne un objet à l'entité qui en fait la demande
	 * syntaxe : giveitem xxx_xxxxxx
	 */
	cmd_giveitem: function(oInstance, oEntity, sItem) {
		var oPickup = {
			e: oEntity,
			i: [sItem],
			f: false   // flag d'echec de rammassage
		};
		oInstance.sendSignal('entityPickUpItem', oPickup);
	},
	
	/**
	 * Jump to location
	 * syntaxe : goto x y
	 */
	cmd_goto: function(oInstance, oEntity, x, y) {
		oInstance.teleportEntity(oEntity, x, y);
	},
	
	/**
	 * Se faire appliquer un effet
	 * syntaxe : seteffect xxxxx level
	 */
	cmd_seteffect: function(oInstance, oEntity, sEffect, nLevel, nDuration) {
		if (sEffect in Effect) {
			var oEffect = new Effect[sEffect](nLevel | 0);
			if (typeof nDuration !== undefined) {
				oEffect.setDuration(nDuration | 0);
			}
			oInstance.applyEffect(oEffect, oEntity, oEntity);
		}
	},
	
	/**
	 * Spawns a monster nearby
	 */
	cmd_spawn: function(oInstance, oEntity, sMob) {
		oInstance.createMonsterEntity(sMob, oEntity.xSector, oEntity.ySector);
	}
});

module.exports = MW.Debuggy;
