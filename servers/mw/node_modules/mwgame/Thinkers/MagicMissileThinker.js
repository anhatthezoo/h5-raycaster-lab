var O2 = require('o2');
var Thinker = require('./MissileThinker.js');
var u = require('mwgame/Utils.js');
var CONST = require('mwgame/data/consts.js');


O2.extendClass('MagicMissileThinker', MissileThinker, {
	
	thinkMove: function() {
		if (this.oGame._bStating) {
			this.chaseTargets();
		}
		O2.parent(this);
	},
	
	/**
	 * Tente de se rapprocher de cibles potentielles, soit qu'elle soient magnétisée soit que le missile est ainsi fait ainsi 
	 */
	chaseTargets: function() {
		// recherche de cibles
		this.oGame.getAreaEntities([CONST.ENTITY_TYPE_MOB, CONST.ENTITY_TYPE_PLAYER], this.oEntity.x, this.oEntity.y, 256).forEach(function(m) {
			if (m.getSoul() && m != this.getOwner()) {
				var nMagnet = Math.max(-4, Math.min(4, m.getSoul().getAttribute('magnet')));
				if (nMagnet != 0) {
					var nSign = nMagnet / Math.abs(nMagnet);
					var fDeriv = this.approachTarget(m, nMagnet / 10);
					if (fDeriv != 0) {
						this.oEntity.setCourse(this.oEntity.a + nSign * fDeriv);
					} else if (nSign < 0) {
						this.oEntity.setCourse(this.oEntity.a - nMagnet / 10);
					}
				}
			}
		}, this);
	},
	
	/**
	 * Tente de se rapprocher d'une cible désignée. 
	 */
	approachTarget: function(oTarget, fDeriv) {
		oMissile = this.oEntity;
		var mx = oMissile.x;
		var my = oMissile.y;
		var tx = oTarget.x;
		var ty = oTarget.y;
		var xForward = Math.cos(oMissile.a) + mx;
		var yForward = Math.sin(oMissile.a) + my;
		var xLeft = Math.cos(oMissile.a + fDeriv) + mx;
		var yLeft = Math.sin(oMissile.a + fDeriv) + my;
		var xRight = Math.cos(oMissile.a - fDeriv) + mx;
		var yRight = Math.sin(oMissile.a - fDeriv) + my;
		var nDistForward = u.distance(xForward, yForward, tx, ty);
		var nDistLeft = u.distance(xLeft, yLeft, tx, ty);
		var nDistRight = u.distance(xRight, yRight, tx, ty);

		var nLowest = nDistForward < nDistLeft ? nDistForward : nDistLeft;
		nLowest = nLowest < nDistRight ? nLowest : nDistRight;
		switch (nLowest) {
			case nDistForward:
				return 0;
				
			case nDistRight:
				return -fDeriv;
				
			case nDistLeft:
				return fDeriv;
		}
		throw new Error('wtf ! derivation cannot be found while approaching target');
	}
});

module.exports = MagicMissileThinker;
