/**
 * Module ai twinker
 * -----------------
 * Permet de tagger les thinker avec des modificateur comportementaux
 * en fonction des effet qui les affligent.
 * exemple : 
 * Confusion : le thinker ne distinguera plus allié et ennemis
 * Snare / Root / Haste : le thinker changera la vitesse de déplacement
 * Hold : Plus aucune action possible.
 * ...
 */

var O2 = require('o2');
var Mediator = require('mediator');
var Plugin = Mediator.Plugin;
var u = require('mwgame/Utils.js');
var CONST = require('mwgame/data/consts.js');


var ModAITwinker = O2.extendClass(Plugin, {
	getName: function() {
		return 'ModAITwinker';
	},
	
	init: function() {
		this.register('entityAttributeChanged');
		this.register('entityHit');
	},
	
	/**
	 * Calcule le speedModifier de l'entité en fonction de ses attributs
	 * @param oEntity
	 */
	computeSpeedModifier: function(oEntity) {
		var oCreature = oEntity.getSoul();
		if (oCreature.getAttribute('root') > 0 || oCreature.getAttribute('hold') > 0) {
			oEntity.fSpeedModifier = 0;
			oEntity.bStateChanged = true;
			return;
		}; 
		// prendre les vitesse calculées par le client
		var nFactor = oCreature.getAttribute('speed') | 0;
		oEntity.fSpeedModifier = Math.max(0, 1 + nFactor / 100);
		oEntity.bStateChanged = true;
	},
	
	entityAttributeChanged: function(oInstance, oData) {
		var oEntity = oData.e;
		if (oEntity.getType() != CONST.ENTITY_TYPE_MOB) {
			return;
		}
		var sAttribute = oData.a;
		var nValue = oData.v;
		var nPreviousValue = oData.p;
		switch (sAttribute) {
			case 'speed':
			case 'root':
				// calculer le nouveau modificateur de vitesse
				this.computeSpeedModifier(oEntity);
				break;
				
			case 'hold':
				this.computeSpeedModifier(oEntity);
				if (oEntity.oThinker) {
					oEntity.oThinker.actionHold(nValue);
				}
				break;

		}
	},
	
	entityHit: function(oInstance, oData) {
		var oEntity = oData.e;
		if (oEntity.getType() != CONST.ENTITY_TYPE_MOB) {
			return;
		}
		var oMissile = oData.m;
		var oOwner = oData.o;		
		if (!oEntity.oThinker.getTarget()) {
			oEntity.oThinker.setTarget(oOwner);
		}
	}
});

module.exports = ModAITwinker;
