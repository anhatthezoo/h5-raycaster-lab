test('basic', function(assert) {
	var g = new MWGame();
	assert.ok(g, 'game is instanciated');
});


test('client connection', function(assert) {
	var g = new MWGame();
	var s = {truc: 'machin'};
	var id = g.connectClient('toto', s);
	
	assert.equal(id, 1, 'first id is always 1');
	assert.equal(g._aClients[1].getName(), 'toto', 'client toto connected');
	assert.equal(g._aClients[1].getSocket().truc, 'machin', 'client socket is toto:machin');

	s = {truc: 'blabla'};
	id = g.connectClient('bob', s);

	assert.equal(id, 2, 'second id is always 2');
	assert.equal(g._aClients[2].getName(), 'bob', 'client bob connected');
	assert.equal(g._aClients[2].getSocket().truc, 'blabla', 'client socket is toto:blabla');
});

test('client deconnection', function(assert) {
	var g = new MWGame();

	g.connectClient('toto', {truc: 'machin'});
	g.connectClient('bob', {truc: 'blabla'});
	
	g.disconnectClient(1);
	assert.equal(g._aClients[1], null, 'client 1 is disconnected');
	assert.equal(g._aClients[2].getName(), 'bob', 'client 2 is still online');

	
	assert.throws(function() {
		g.disconnectClient(1);
	}, 'client 1 disconnection throw exception');
	
	g.disconnectClient(2);
	assert.equal(g._aClients[2], null, 'client 2 is disconnected');
});



test('client get', function(assert) {
	var g = new MWGame();
	
	g.connectClient('toto', {truc: 'machin'});
	g.connectClient('bob', {truc: 'blabla'});

	assert.equal(g.getClient(1).getName(), 'toto', 'client toto gotten');
	assert.equal(g.getClient(2).getName(), 'bob', 'client bod gotten');
	
});

