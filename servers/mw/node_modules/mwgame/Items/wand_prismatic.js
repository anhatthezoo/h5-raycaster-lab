var O2 = require('o2');
var u = require('../Utils.js');
var Effect = require('../Effects.js');
var Wand = require('./Abstract/Wand.js');
var CONST = require('../data/consts.js');

/**
 * Baguette magique Prismatique
 * 
 * Tir normal :
 * Un missile aléatoire parmi sept couelur différentes
 * 
 * Tir chargé :
 * une gerbe de 7 missiles colorés
 * 
 * selon la couleur un missile possède les effets suivants
 * 
 */
var WandPrismatic = O2.extendClass(Wand, {

	cooldown: 400,
	angle: 1,
	missiles: 7,
	chargeTime: 2500,
	missileRefs: null,
	
	__construct: function() {
		this.missileRefs = ['p_magbolt_c3', 'p_magbolt_c8', 'p_magbolt_c4', 'p_magbolt_c5', 'p_magbolt_c6', 'p_magbolt', 'p_magbolt_c2'];
	},
	
	buildMissile: function(ctx, nColor, fAngle) {
		var e = null;
		/* effets néfastes possibles
		 * aveuglement
		 * confusion
		 * dégats 1
		 * dégats 3
		 * dégats 2
		 * poison
		 * hold
		 */
		switch (nColor) {
			case 0:
				e = new Effect.Blindness();
				e.setDuration(CONST.EFFECT_DURATION_SHORT);
				break;

			case 1:
				e = new Effect.Confusion();
				e.setDuration(CONST.EFFECT_DURATION_SHORT);
				break;

			case 2:
				e = new Effect.Damage(u.rand(5, 15));
				break;
				
			case 3:
				e = new Effect.Damage(u.rand(10, 30));
				break;
				
			case 4:
				e = new Effect.Damage(u.rand(7, 21));
				break;
				
			case 5:
				e = new Effect.Power(-25);
				e.setDuration(CONST.EFFECT_DURATION_SHORT);
				break;
				
			case 6:
				e = new Effect.Hold(u.rand(3, 6));
				e.setDuration(CONST.EFFECT_DURATION_SHORT);
				break;
		}
		if (e) {
			var m = ctx.instance.shootMissile(ctx.caster, this.missileRefs[nColor], fAngle);
			m.setData('effects', [e]);
			return m;
		} else {
			return null;
		}
	},
	
	fire: function(ctx) {
		var aMissiles = [];
		if (ctx.charge > this.chargeTime) {
			var fAngleBase = -this.angle / 2;
			var fAngleDiff = this.angle / (this.missiles - 1);
			for (var iMis = 0; iMis < this.missiles; ++iMis) {
				aMissiles.push(this.buildMissile(ctx, iMis, iMis * fAngleDiff + fAngleBase));
			}
		} else {
			aMissiles.push(this.buildMissile(ctx, u.rand(0, this.missiles - 1), 0));
		}
		ctx.missiles = aMissiles;
	}
});

module.exports = WandPrismatic;
