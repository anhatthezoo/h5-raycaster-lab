/**
 * Classe de gestion d'une soul
 */

var O2 = require('o2');
var ATTR = require('mwgame/data/attributes.js');

O2.createClass('ADV.Soul', {
	_oAttributes: null,
	_oBonuses: null,
	_oData: null,
	_aEffects: null,
	onAttributeChanged: null,	// WeirEvent of attribute changed
	
	__construct: function() {
		this._oData = {};
		this._oAttributes = {};
		this._oBonuses = {};
		this._aEffects = []; // géré par l'effect processor
	},
	
	setData: function(sData, xValue) {
		this._oData[sData] = xValue;
	},

	getData: function(sData) {
		return sData in this._oData ? this._oData[sData] : null;
	},
	
	getEffects: function() {
		return this._aEffects;
	},
	
	/**
	 * Returns all attributes and values
	 */
	getAttributes: function() {
		var oAttributes = {};
		var F = (function(sAttr) {
			if (!(sAttr in oAttributes)) {
				oAttributes[sAttr] = this.getAttribute(sAttr);
			}
		}).bind(this);
		Object.keys(this._oAttributes).forEach(F);
		Object.keys(this._oBonuses).forEach(F);
		return oAttributes;
	},
	
	/** Retourne la valeur d'un Attribute modifié par son éventuel bonus
	 * @param string sAttribute nom de l'attribut
	 * @return int renvoie 0 si l'attribut n'existe pas
	 */
	getAttribute: function(sAttribute) {
		if (!(sAttribute in ATTR)) {
			throw new Error('unknown attribute : ' + sAttribute);
		}
		var nBonus;
		if (sAttribute in this._oBonuses) {
			nBonus = this._oBonuses[sAttribute];
		} else {
			nBonus = 0;
		}
		var nValue;
		if (sAttribute in this._oAttributes) {
			nValue = this._oAttributes[sAttribute] + nBonus;
		} else {
			nValue = nBonus;
		}
		var aAttr = ATTR[sAttribute];
		if (aAttr) {
			if (aAttr[0] !== null) {
				nValue = Math.max(aAttr[0], nValue);
			}
			if (aAttr[1] !== null) {
				nValue = Math.min(aAttr[1], nValue);
			}
		}
		return nValue;
	},
	
	/** Modifier la valeur d'un Attribute
	 * @param sAttribute nom de l'attribut
	 * @param nValue valeur de l'attribut
	 */
	setAttribute: function(sAttribute, nValue) {
		if (!(sAttribute in ATTR)) {
			throw new Error('unknown attribute : ' + sAttribute);
		}
		var nPreviousValue = 0;
		var bAttrPresent = sAttribute in this._oAttributes;
		if (bAttrPresent) {
			nPreviousValue = this._oAttributes[sAttribute];
		}
		if (nValue) {
			this._oAttributes[sAttribute] = nValue;
		} else {
			if (bAttrPresent) {
				delete this._oAttributes[sAttribute];
			}
		}
		this.doAttributeChanged(sAttribute, nValue, nPreviousValue);
	},
	
	/** Modifier la valeur bonus d'un Attribute (données par les effets)
	 * @param sAttribute nom de l'attribut
	 * @param nValue valeur de l'attribut
	 */
	setBonus: function(sAttribute, nValue) {
		if (!(sAttribute in ATTR)) {
			throw new Error('unknown attribute : ' + sAttribute);
		}
		var nNewValue = 0;
		var nPreviousValue = 0;
		if (nValue === 0) {
			return;
		}
		if (sAttribute in this._oBonuses) {
			nPreviousValue = this._oBonuses[sAttribute];
			nNewValue = nPreviousValue + nValue;
			if (nNewValue === 0) {
				delete this._oBonuses[sAttribute];
			} else {
				this._oBonuses[sAttribute] = nNewValue;
			}
		} else {
			this._oBonuses[sAttribute] = nNewValue = nValue;
		}
		this.doAttributeChanged(sAttribute, nNewValue, nPreviousValue);
	},
	
	
	/**
	 * Défini l'event de surveillance des changement d'attributs
	 * et de bonus
	 * @param function oFunc
	 */
	setOnAttributeChanged: function(oFunc) {
		this.onAttributeChanged = oFunc;
		var sAttr = '', oAttr = {};
		for (sAttr in this._oAttributes) {
			oAttr[sAttr] = true;
		}
		for (sAttr in this._oBonuses) {
			oAttr[sAttr] = true;
		}
		for (sAttr in oAttr) {
			this.doAttributeChanged(sAttr, this.getAttribute(sAttr), 0);
		}
	},
	
	/**
	 * Déclenche l'evenement de changementd e valeur dans un bonus
	 * ou un attribut.
	 */
	doAttributeChanged: function(sAttribute, nNewValue, nPreviousValue) {
		if (this.onAttributeChanged && nNewValue != nPreviousValue) {
			this.onAttributeChanged(this, sAttribute, nNewValue, nPreviousValue);
		}
	}
});

module.exports = ADV.Soul;
