var O2 = require('o2');
var MagicMissileThinker = require('./MagicMissileThinker.js');
var Effect = require('mwgame/Effects.js');
var CONST = require('mwgame/data/consts.js');
var Bresenham = require('mwgame/Bresenham.js');

/**
 * Ce thinker est dédié aux missile qui explosent.
 * En explosion, un missile déclenche des effet visuels (qui sont dans la donnée locale 'explosion')
 * Puis applique tous ses effets à toute créature se trouvant dans un rayons déterminé et non protégé par un obstacle solide
 */
var ExplodingMissileThinker = O2.extendClass(MagicMissileThinker, {
	
	radius: 128,
	
	explosion: function() {
		var oMissile = this.oEntity;
		var oInstance = this.oGame;
		var xExp = oMissile.getData('explosion');
		if (xExp) {
			if (Array.isArray(xExp)) {
				xExp.forEach(function(sExp) {
					oInstance.pushNetworkMessage(oInstance.getClientEntities(), {m: 'vfx', b: sExp, x: oMissile.x, y: oMissile.y});
				});
			} else {
				oInstance.pushNetworkMessage(oInstance.getClientEntities(), {m: 'vfx', b: xExp, x: oMissile.x, y: oMissile.y});
			}
		}
		var aEffects = oMissile.getData('effects');
		if (aEffects)  {
			oInstance.getAreaEntities([CONST.ENTITY_TYPE_MOB, CONST.ENTITY_TYPE_PLAYER], oMissile.x, oMissile.y, this.radius).forEach(function(p) {
				if (p == oMissile._oEntityCollision) {
					return;
				}
				var bBlocked = Bresenham.line(oMissile.xSector, oMissile.ySector, p.xSector, p.ySector, function(x, y) {
					return !oInstance.isWalkable(x, y);
				});
				if (bBlocked) {
					return;
				}
				var aNewEffects = aEffects.map(function(e) {
					return Effect.clone(e);
				});
				oInstance.applyEffect(aNewEffects, p, oMissile.getThinker().getOwner());
			});
		}
	},
	
	bump: function(bx, by) {
		O2.parent(this, bx, by);
		this.explosion();
	},

	resolveCollision : function(oTarget) {
		O2.parent(this, oTarget);
		this.explosion();
	}
});

module.exports = ExplodingMissileThinker;
