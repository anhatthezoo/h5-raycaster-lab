var O2 = require('o2');

/**
 * Horde d'entité
 */
var EntityHorde = O2.createClass({

	aHorde: null,
	aIds: null,
	nMaxEntityId: 4095,
	

	__construct: function() {
		this.aHorde = [];
		this.aIds = [];
		for (var id = 1; id < this.nMaxEntityId; ++id) {
			this.aIds.push(id);
		}
	},

	/**
	 * Liaison d'une Entité dans la horde
	 * @param oEntity Entité
	 * @return int identifiant utilisé pour stocker l'entité
	 */
	recruit: function(oEntity) {
		var id = this.aIds.shift();
		oEntity.id = id;
		this.aHorde[id] = oEntity;
		return id;
	},

	/**
	 * Supprime une entité de la horde
	 * @param xEntité Entité à virer
	 */
	dismiss: function(xEntity) {
		var id, oEntity;
		if (typeof xEntity === 'object') {
			oEntity = xEntity;
			id = oEntity.id;
		} else {
			id = xEntity;
			oEntity = this.aHorde[id];
		}
		oEntity.setThinker(null);
		this.aHorde[id] = null;
		this.aIds.unshift(id);
	},
	
	/**
	 * Dismisses all entities
	 */
	clear: function() {
		this.aHorde.forEach(function(e, id) {
			if (!!e) {
				e.setThinker(null);
			}
		});
		this.aHorde = [];
		this.aIds = [];
		for (var id = 1; id < this.nMaxEntityId; ++id) {
			this.aIds.push(id);
		}
	},

	/** 
	 * Acces à l'entité dont l'id est spécifié
	 * @param id identifiant
	 * @return Entity
	 */
	get: function(id) {
		return this.aHorde[id];
	},
	
		
	/**
	 * Iteration sur les éléments
	 * @param pCallback function(oEntity);
	 */
	each: function(pCallback) {
		var h = this.aHorde;
		h.forEach(function(e) {
			if (e) {
				pCallback(e);
			}
		});
	},
	
	/** 
	 * Renvoie le nombre d'entité d'un type particulier*
	 * @param nType type cherché, ou 0 pour tout type
	 * @return int
	 */
	count: function(nType) {
		nType = nType || 0;
		var h = this.aHorde;
		var nLen = h.length;
		var oEnt;
		var n = 0;
		for (var i = 0; i < nLen; ++i) {
			oEnt = h[i];
			if (oEnt) {
				if (nType) {
					if (oEnt.getType() === nType) {
						++n;
					}
				} else {
					++n;
				}
			}
		}
		return n;
	},
	
	/**
	 * Renvoie des info de monitoring du serveur
	 */
	getStatus: function() {
		var oEntities = {};
		var oTypes = ['none', 'mobs', 'players', 'placeables', 'missiles', 'items'];
		var oEntity;
		var sType;
		var nEntityCount = this.aHorde.length;
		var i;
		for (i = 0; i < nEntityCount; ++i) {
			oEntity = this.get(i);
			if (oEntity) {
				sType = oTypes[oEntity.getType()];
				if (!(sType in oEntities)) {
					oEntities[sType] = [];
				}
				oEntities[sType].push({
					id: oEntity.getId(),
					name: oEntity.getName() || oEntity.getData('name'),
					blueprint: oEntity.sBlueprint					
				});
			}
		}
		return oEntities;
	},
});

module.exports = EntityHorde;
