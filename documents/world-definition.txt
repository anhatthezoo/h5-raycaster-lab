

code-bloc-physique
entier conservant les propriété physique et graphique d'un bloc.
  format: 0xaabbcddd
  ddd: code-texture : fait référence à l'un des éléments de levelData.walls.codes
  c: code-bloc-prop : fait référence à une propriété physique de bloc définie dans Raycaster
  bb: offset d'enfoncement de la texture valeur de 00 (pas d'enfoncement) à 3F (limite)
  aa: non utilisé 00


code-bloc-prop

  PHYS_NONE:                   0x00,  // correspond à un block vide pouvant êtres traversé
  PHYS_WALL:                   0x01,  // correspond à un mur bloquant la progression

  // Laby door properties             // correspond à différente portes
  PHYS_DOOR_SLIDING_UP:        0x02,  // correspond à une porte coulissant vers le plafond
  PHYS_CURT_SLIDING_UP:        0x03,  // correspond à un rideau se levant vers le plafond. la texture se tasse pour simuler l'effet "levé de rideau"
  PHYS_DOOR_SLIDING_DOWN:      0x04,  // correspond à une porte coulissant vers le sol
  PHYS_CURT_SLIDING_DOWN:      0x05,  // correspond à un rideau tombant sur le sol. la texture se tasse pour simuler l'effet "tombé de rideau"
  PHYS_DOOR_SLIDING_LEFT:      0x06,  // correspond à une porte coulissante vers la gauche
  PHYS_DOOR_SLIDING_RIGHT:     0x07,  // correspond à une porte coulissante vers la droite
  PHYS_DOOR_SLIDING_DOUBLE:    0x08,  // correspond à une porte coulissante à double battant

  PHYS_SECRET_BLOCK:           0x09,  // correspond à un bloc secret qui souvre par enfoncement
  PHYS_TRANSPARENT_BLOCK:      0x0A,  // correspond à un bloc semi transparent : sa texture comporte des trous, des zones transparentes
  PHYS_INVISIBLE_BLOCK:        0x0B,  // correspond à un bloc invisible mais bloquant la progression
  PHYS_OFFSET_BLOCK:           0x0C,  // correspond à un bloc solide muni d'un offset




levelData = {
  walls: {                       // Données concernant les bloc et les murs (textures et propriétés)
    src: string,                 // url de l'image contenant les textures
                                 // Les textures sont alignées bout à bout.
                                 // La texture du coin 0, 0 à pour indice 0

    codes: [                     // liste des définition des codes textures
                                 // ces codes textures sont sous la forme de tableau []

                                 // un code texture peut contenir :

                                 // A) deux entiers : ce sont les deux références texture qui seront utilisé
                                 // pour les face X et Y des block auxquels sera appliqué ce code texture

                                 // B) quatre entiers : ce sont 4 références texture qui seront utilisées
                                 // pour chaque face du block

                                 // C) un tableau d'entier et 3 entier :
                                 // c'est une texture animée.
                                 // le premier élément (le tableau d'entier) contient 2 ou 4 entier
                                 // faisant rénérence à des texture (ce sont des cas A) ou B) imbriqués)
                                 // les 3 derniers int sont le nombre de frames, le delai de chaque frame (ms), et le flag de loop (1 ou 2)

      [ int, int ],             // cas A)
      ...

      [ int,                    // cas B)
        int,
        int,
        int ],
      ...

	  [[int, int],              // cas C)
	    int,
	    int,
	    int ],
      ...
    ],

  },
  
  flats: {						  // objet de définition des surface horizontale comme le plafon ou le sol
    src: string,				  // url de l'image contenant les tiles
    codes: [ [int, int], [...], ... ]			  // liste des couple d'indice texture dans le fichier image des flat 
    							  //  pour chaque code-texture d'un bloc.
    							  // les indices de ce tableau doivent être synchronisés avec les indice du tableau "codes"
    							  // de l'objet "walls"
    							  // une entrée nulle signifie : pas de sol ni de plafond pour ce block
    							  // Si la paire est constitué de deux nombres, dont l'un est égale à -1, cela signifie que 
    							  // le sol (premier élément de la paire = -1) ou le plafond (second élément de la paire = -1) est 
    							  // manquant
  },

  map: [                         // Tableau double dimension contenant les codes-block, le nombre d'éléments conditionne la taille du labyrinthe
    [ int, int, int, ... ],      // Carte du labyrinthe, chaque élément est un code-block
    [ int, int, int, ... ],      // format d'ubn code block : 0xAABBCDDD
    [ int, int, int, ... ],      // AA : 8 bits : aucune signification
    [ int, int, int, ... ],      // BB : 8 bits : offset entre 0 et 63
    ...                          // C :
  ],
  
  uppermap: [                    // Exactement le même type de tableau que "map"
    [ int, int, int, ... ],      // Mais pour le second niveau
    [ int, int, int, ... ],
    [ int, int, int, ... ],
    ...  
  ],

  options: {                    // options
    stretch: boolean,           // si true, etire les texture du premier etage
  },
      
  visual: {                       // Données visuelle d'ambiance
    ceilColor: {r: int, g: int, b: int},      // couleur du plafond
    floorColor: {r: int, g: int, b: int},     // couleur du sol
    light: int,                               // indice de luminosité (200 = lumineux, 50 = sombre
    fogDistance: int,                         // distance du fog (valeur conseillée 1)
    fogColor: {r: int, g: int, b: int},        // couleur du fog
    filter: false |  {r: float, g: float, b: float}   // filtre de couleur pour les sprites, chaque composante est un facteur multiplicateur
    diffuse: float,								// entre 0 et 1 ratio de lumière emise	
  },
  
  startpoint: {x: int, y: int, angle: float},  // coordonnée du point de spawn solo

  tiles: {                        // les tiles sont les images contenant plusieurs frames qui permettent d'animer un sprite
    string: {                     // Référence de la Tile
      src: string,                // source de l'image contenant les frames du sprites
      width: int,                 // largeur des frames
      height: int,                // hauteur des frames  
      frames: int,                // nombre de frames
      noshading: boolean,		  // si false alors la tile n'est pas sujette au shading : gain de temps et de mémoire mais pas de shading...
      animations: [               // définitions des animations : il en faut au moins une
        [                         // Première animation : tableau de 4 éléments, le premier élément étant un tableau de 8 entiers
          [                       // Tableau des première frame de chaque direction
            int,                  // Indice de la première frame à l'angle 0 : de dos
            int,                  // Indice de la première frame à l'angle 1 : de dos tourné vers la droite
            int,                  // Indice de la première frame à l'angle 2 : de coté tourné vers la droite
            int,                  // Indice de la première frame à l'angle 3 : de face tourné vers la droite
            int,                  // Indice de la première frame à l'angle 4 : de face
            int,                  // Indice de la première frame à l'angle 5 : de face tourné vers la gauche
            int,                  // Indice de la première frame à l'angle 6 : de coté tourné vers la gauche
            int ],                // Indice de la première frame à l'angle 7 : de dos tourné vers la gauche
          int,                    // Nombre de frame dans l'animation 
          int,                    // Durée des frames de l'animation
          int                     // 1 = Animation boucle, 0 = Pas de boucle
        ],
        ...						  // un animation peut etre "null" dans ce cas le sprite sera invisible tant que cette animation est active
      ]
    }
  },


  blueprints: {
    string: {                               // Référence du blueprint
      type: int,                            // Type logique : 0 = no type, 1 = mob, 2 = player, 3 = placeable, 4 = missile, 5 = item
      tile: string,                         // Référence de la Tile
      width: int,                           // Taille physique : longueur
      height: int,                          // Taille physique : hauteur
      thinker: string,                      // Thinker utilisé
      fx: int,                              // Flag d'effets spéciaux (0 = pas d'effet. 1 = Lighter le sprite est lumineux translucide. 2 = Le sprite n'est pas affecté par la luminosité)
      data: object                          // Données supplémentaires
    },
    ...
  },

  objects: [                                // Enumération des objets
    {                                       // premier objet
      blueprint: string,                    // référence du blueprint
      x: int,                               // position X
      y: int,                               // position Y
      angle: int                            // Angle initial
    },
    ...
  ],
  
  tags: [									// Enumération des tags
	{
		x: int,                             // position
		y: int,
		tag: string                         // valeur
	}, 
	...
  ]
  
  background: ...                           // src du background
}




////// CONFIGURATION //////

var CONFIG = {
  game: {
    interval: 40,			/* timer interval (ms)                */
    doomloop: 'interval',	/* doomloop type "raf" or "interval"  */
    fullscreen: false,		/* if true : the game will be fullscreen */
    fpscontrol: false,		/* if true : the standard fps control will applied to move the camera */
    controlthinker: ''		/* sets a custom control thinker ; give a classname here */
  },
  raycaster: {
    canvas: 'screen',		/* html identifient of the rendering DOM canvas */
    drawMap: false,			/* if true : a small debug map will be displayed will playing */
    smoothTextures: false,	/* if true : the wall textures will look smoother */
    planeSpacing: 64,		/* the size of a map grid cell (by default : 64).
    wallHeight: 96,			/* the height of walls */
    shades: 16				/* how many shades : reduce this number to reduce memory consumption */
  }
};
