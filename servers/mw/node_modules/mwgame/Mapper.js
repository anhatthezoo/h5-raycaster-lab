/**
 * Classe de construction d'un niveau à partir de données brutes issues d'un générateur
 * La classe accepte ...
 *  - un tableau à deux dimensions composé de codes logiques
 *  - une palette associant les codes logiques à des codes physiques
 *  - des références à des textures
 */



/**
 * Maps format :
 * {
 * 		map: array of array of byte, // chaque cellule du double tableau est une référence à l'entrée de la palette de blocks
 * 		uppermap: array of array of byte, // chaque cellule du double tableau est une référence à l'entrée de la palette de blocks
 * 		palette: {
 * 			background: string,		// référence texture du ciel : nom du fichier sans chemin ni extension
 * 			walls: string,			// référence texture des murs : nom du fichier sans chemin ni extension
 * 			flats: string,			// référence texture du sol et du plafond : nom du fichier sans chemin ni extension
 * 			blocks: {
 * 				<N>: {
 * 					w: array of int, // couple de référence texture droite et gauche ; null = pas de mur ; -1 = pas de texture
 * 					f: array of int, // couple de référence texture sol et plafond
 * 					c: int,			 // code physique
 * 					o: int			 // offset
 * 				},
 * 				...
 * 			}
 * 		}
 * 		visual: {
 * 			ceilColor: {r: int, g: int, b: int},
 * 			floorColor: {r: int, g: int, b: int},
 * 			fogColor: {r: int, g: int, b: int},
 * 			fodDistance: float,
 * 			filter: {r: float, g: float, b: float} | false,
 * 			light: int,
 * 			diffuse: float,
 * 		},
 * 		tags: [
 * 			{ x: int, y: int, tag: string },
 * 			....
 * 		],
 * 		objects: [
 * 			{ x: float, y: float, angle: float, blueprint: string },
 * 			...
 * 		],
 * 		startpoint: {
 * 			x: int,
 * 			y: int,
 * 			angle: float
 *		}
 * }
 * 				
 */

var fs = require('fs');

function load(sMap) {
	return JSON.parse(fs.readFileSync('data/maps/' + sMap + '.json'));
}

module.exports = {
	load: load
};
