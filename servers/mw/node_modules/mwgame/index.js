var VERSION = require('./version.js');
var wsh = require('wshelper');
var http = require('httphelper');

var MWGame = require('./MWGame.js');
var oMWGame = null;
var oMWGConfig = null;

var oInspector = require('./Inspector.js');
var ServiceChain = require('./ServiceChain.js');


function serverLog() {
	var a = Array.prototype.slice.call(arguments, 0);
	http.writeLog(a.join(' '));
}


function instanceLogMessage(oInstance, sMessage) {
	serverLog(oInstance.getName() , '>', sMessage);
}

/**
 * L'instance commande la production de missile à lancer immédiatement
 * @param oInstance
 * @param oMissile un missile ou array of missile
 */
function instanceLaunchMissiles(oInstance, oMissile) {
	var xData, m;
	if (Array.isArray(oMissile)) {
		xData = [];
		for (var iMis = 0; iMis < oMissile.length; ++iMis) {
			m = oMissile[iMis];
			xData.push({
				i: m.id,
				x: m.x,
				y: m.y,
				a: m.a,
				b: m.sBlueprint
			});
		}
	} else {
		xData =	{
			i: oMissile.id,
			x: oMissile.x,
			y: oMissile.y,
			a: oMissile.a,
			b: oMissile.sBlueprint
		};
	}
	wsh.send(oInstance.getSockets(), 'MC', xData);
}

function instanceNetworkMessage(oInstance, aMessage) {
	if (aMessage[0] === null) {
		return;
	}
	var aSockets = aMessage[0].map(function(e, i, a) {
		if (e) {
			var cid = e.getData('idClient');
			if (cid) { // client toujour actif
				var oClient = oMWGame.getClient(cid);
				return oClient.getSocket();
			} // cid = 0 : le client s'est tiré entre temps
		}
		return null;
	});
	var oMessage = aMessage[1];
	wsh.send(aSockets, 'NM', oMessage);
}

/**
 * Un client s'est fait butté
 * Faut prévenir le client
 */
function instanceEntityKilled(oInstance, oEntity, oKiller) {
	var idClient = oEntity.getData('idClient');
	if (idClient) {
		var oClient = oMWGame.getClient(idClient);
		serverLog(oInstance.getName(), '> entity killed', '- killer:', oKiller.getData('name'), '- victim:', oEntity.getData('name'));
		oClient.getSocket().emit('PK', { k: oKiller.getData('name') });
	}
	instanceEntityDestroyed(oInstance, oEntity);
}

/**
 * Création d'un paquet de donnée relatif au message socket 'OC'
 */
function createOCPacketFromEntity(oEntity) {
	var p = {
		i: oEntity.getId(), 
		x: oEntity.x, 
		y: oEntity.y, 
		a: oEntity.a, 
		b: oEntity.sBlueprint,
		n: oEntity.oBlueprint.name
	};
	var idClient = oEntity.getData('idClient');
	if (idClient) {
		var c = oMWGame.getClient(idClient);
		p.n = c.getName();
		p.d = {
			color: c.getData('color')
		}
	} else {
		p.n = oEntity.getData('name') || oEntity.oBlueprint.name;
	}
	return p;
}

/**
 * Apparition d'une entity non joueuse
 * @param oInstance
 * @param oEntity
 */
function instanceEntitySpawn(oInstance, oEntity) {
	wsh.send(oInstance.getSockets(), 'OC', createOCPacketFromEntity(oEntity));
}


/**
 * Réapparition d'une entité controlée par client après butage
 * Faut prévenir le client
 */
function instanceEntityRespawn(oInstance, oEntity) {
	var idClient = oEntity.getData('idClient');
	var oClient = oMWGame.getClient(idClient);
	oClient.getSocket().emit('PR', { x: oEntity.x, y: oEntity.y, a: oEntity.a });
	wsh.send(oClient.getOtherClientSockets(), 'OC', createOCPacketFromEntity(oEntity));
}

/**
 * Exécuté lorsque l'état physique (position, vitesse...) 
 * des entités change dans une instance donnée
 * @param oInstance
 * @param oStatus
 */
function instanceStateChanged(oInstance, aStates) {
	wsh.send(oInstance.getSockets(), 'OU', aStates);
};

/**
 * Exécuté lorsque l'état logique des entités (attributs, caracteristique rp)
 * change dans une instance donnée
 * @param oInstance
 * @param oStatus
 */
function instanceSoulChanged(oInstance, aSouls) {
	wsh.send(oInstance.getSockets(), 'OS', aSouls);
};

/**
 * Exécuté lorsqu'une porte est ouverte dans une instance
 * @param oInstance
 * @param x position de la porte
 * @param y
 */
function instanceDoorOpen(oInstance, x, y) {
	wsh.send(oInstance.getSockets(), 'DO', {x: x, y: y});
}

/**
 * Exécuté lorsqu'une porte est fermée dans une instance
 * @param oInstance
 * @param x position de la porte
 * @param y
 */
function instanceDoorClose(oInstance, x, y) {
	wsh.send(oInstance.getSockets(), 'DC', {x: x, y: y});
}


function instanceEntityDestroyed(oInstance, oEntity) {
	wsh.send(oInstance.getSockets(), 'OD', {i: oEntity.getId(), x: oEntity.x, y: oEntity.y});
}


function instanceMapChange(oInstance, x, y, b, sTag) {
	wsh.send(oInstance.getSockets(), 'MM', {x: x, y: y, b: b, t: sTag});
}

/**
 * Triggered when an instance ends
 * @param oInstance ending instance
 */
function instanceEnd(oInstance) {
	wsh.send(oInstance.getSockets(), 'EG', {i:oInstance.getId()});
	oMWGame.endInstance(oInstance);
	var sInst = oInstance.getName();
	var sMap = oMWGConfig.games[sInst].map;
	serverLog(sInst, '> loading map', sMap);
	oMWGame.createInstance(sInst, oMWGConfig.games[sInst], oInstance.getId());
}





function init(c) {
	startMWGame(c);
	
	http.defineCommand('mwonline', function(oResponse, xParam) {
		http.transmitFile('/online/diode_green.png', oResponse);
		return true;
	});
	
	http.defineCommand('mwstatus', function(oResponse, xParam) {
		var oStatus = oMWGame.getStatus(['clients', 'plugins', 'instances']);
		var sResponse;
		if (('h' in xParam) && xParam.h == 1) {
			var sResponse = '<table>';
			sResponse += '<tr><th>Server</th><td>' + c.name + '</td></tr>';
			sResponse += '<tr><th>Version</th><td>' + VERSION + '</td></tr>';
			sResponse += '<tr><th>Type</th><td>' + c.type + '</td></tr>'; 
			sResponse += '<tr><th>Players</th><td>' + oStatus.clients.length + '</td></tr>'; 
			sResponse += '<tr><th>MotD</th><td>' + c.motd + '</td></tr>'; 
			sResponse += '</table>';
		} else {
			sResponse = JSON.stringify({
				server: c.name,
				version: VERSION,
				type: c.type,
				players: oStatus.clients,
				instances: oStatus.instances,
				motd: c.motd
			});
		}
		oResponse.end(sResponse);
		return true;
	});
	
	http.defineCommand('mwinspect', function(oResponse, xParam) {
		oResponse.end(oInspector.inspect(oMWGame, xParam).toString());
		return true;
	});
	
	http.defineCommand('mwoption', function(oResponse, xParam, oPostData) {
		var sOption = oPostData.o;
		var sValue = oPostData.v;
		switch (sOption) {
			case 'motd':
				c.motd = sValue;
			break;
		}
		http.transmitFile('/adm/done.html', oResponse);
	});
	
	
}

function startMWGame(c) {
	oMWGConfig = c;
	oMWGame = new MWGame();
	oMWGame.onInstanceStateChanged = instanceStateChanged;
	oMWGame.onInstanceSoulChanged = instanceSoulChanged;
	var oInstance, sInstance = '';
	for (sInstance in c.games) {
		oInstance = oMWGame.createInstance(sInstance, c.games[sInstance]);
		oInstance.onOpenDoor = instanceDoorOpen;
		oInstance.onCloseDoor = instanceDoorClose;
		oInstance.onDestroyEntity = instanceEntityDestroyed;
		oInstance.onEntityKilled = instanceEntityKilled;
		oInstance.onEntitySpawn = instanceEntitySpawn;
		oInstance.onEntityRespawn = instanceEntityRespawn;
		oInstance.onMapChange = instanceMapChange;
		oInstance.onLaunchMissiles = instanceLaunchMissiles;
		oInstance.onNetworkMessage = instanceNetworkMessage;
		oInstance.onLogMessage = instanceLogMessage;
		oInstance.onEnd = instanceEnd;
		serverLog(sInstance, '> loading map', c.games[sInstance].map);
	}
	window.setInterval(oMWGame.process.bind(oMWGame), oMWGame.TIME_FACTOR);
}



function service(oSocket) {
	var sAddress = wsh.getAddress(oSocket);
	serverLog('client connected :', sAddress);

	// Disconnection event
	oSocket.on('disconnect', function() {
		try {
			var idClient = wsh.getData(oSocket, 'id');
			var oClient = oMWGame.getClient(idClient);
			var oServiceChain = new ServiceChain();
			oMWGame.sendSignal('clientDisconnecting', null, {s: oServiceChain, c: oClient});
			oServiceChain.addService(function(c) {
				oMWGame.disconnectClient(idClient);
				serverLog('client disconnected :', sAddress);
				c.next();
			});
			oServiceChain.next();
		} catch (e) {
			serverLog('invalid client disconnection :', sAddress);
			console.log(e.stack);
		}
	});


	/**
	 * demande de login de la part du client
	 * n: nom du client proposé
	 */
	oSocket.on('LI', function(xData) {
		try {
			var oServiceChain = new ServiceChain();
			oServiceChain.setData('key', xData.n);
			oServiceChain.setData('name', xData.n);
			oMWGame.sendSignal('clientConnecting', null, {s: oServiceChain});
			oServiceChain.addService(function(oServiceChain) {
				// trouver un identifiant
				var data = oServiceChain.getData();
				var id = oMWGame.connectClient(data.name, oSocket);
				var oClient = oMWGame.getClient(id);
				for (var s in data) {
					oClient.setData(s, data[s]);
				}
				wsh.setData(oSocket, 'id', id);
				serverLog('client identification #', id, '- address:', sAddress, '- name:', data.name);
				oSocket.emit('ID', { i: id, n: data.name });
				oServiceChain.next();
			});
			oServiceChain.next();
		} catch (e) {
			serverLog('LI', e.toString());
			console.log(e.stack);
			oSocket.disconnect();
		}
	});

	/**
	 * Demande de rejoindre une partie
	 * i: identifiant de l'instance
	 */
	oSocket.on('GJ', function(xData) {
		try {
			var idInstance = xData.i;
			var idClient = wsh.getData(oSocket, 'id');
			if (oMWGame.joinInstance(idClient, idInstance)) {
				var oInstance = oMWGame.getInstance(idInstance);
				var oData = oInstance.getData();
				// on va transmettre toutes les données du jeu au client.
				// ainsi que sa position initiale
				oSocket.emit('MD', oData);
			}
		} catch (e) {
			serverLog('GJ', e.toString());
			console.log(e.stack);
			oSocket.disconnect();
		}
	});
	
	/**
	 * le client signale qu'il est pret a jouer (il a chargé toutes les resources)
	 * (pas de paramètres)
	 */
	oSocket.on('RY', function(xData) {
		try {
			var idClient = wsh.getData(oSocket, 'id');
			var oClient = oMWGame.getClient(idClient);
			var oEntity = oClient.getEntity();
			if (!oEntity) {
				throw new Error('Loading while switching map');
			}
			var idEntity = oEntity.id;
			oClient.setReady(true);
			var oWeapon = oEntity.getData('weapon');
			oSocket.emit('YO', {
				i: idEntity, 
				x: oEntity.x, 
				y: oEntity.y, 
				a: oEntity.a,
				b: oEntity.sBlueprint,
				n: oClient.getName(),
				w: {
					n: oWeapon.resref, // resref
					c: oWeapon.chargeTime, // charge time
				}
			});
			var aOthers = oClient.getOtherClientSockets();
			wsh.send(aOthers, 'OC', createOCPacketFromEntity(oEntity));
			oClient.getInstance().getHorde().each(function(e) {
				if (e.id != idEntity) {
					var s = e.getSoul();
					if (s && s.getAttribute('dead')) {
						return;
					}
					oSocket.emit('OC', createOCPacketFromEntity(e));
				}
			});
			oSocket.emit('OS', oClient.getInstance().getSoulSnapshot());
		} catch (e) {
			serverLog('RY', e.toString());
			console.log(e.stack);
			oSocket.disconnect();
		}
	});

	/**
	 * le client signale un changement dans son mouvement
	 * x: position x
	 * y: position y
	 * a: angle de vue
	 * xs: vitesse en x
	 * ys: vitesse en y
	 */
	oSocket.on('UD', function(xData) {
		try {
			var idClient = wsh.getData(oSocket, 'id');
			var oClient = oMWGame.getClient(idClient);
			var oEntity = oClient.getEntity();
			if (!oEntity) {
				return; // ignoring client without entity
			}
			var x = xData.x;
			var y = xData.y;
			var a = xData.a;
			var ma = xData.ma;
			var ms = xData.ms;
			oEntity.updateTime(xData.t);
			oEntity.move(x, y);
			oEntity.setViewAngle(a);
			oEntity.setSpeedVector(ma, ms);
		} catch (e) {
			serverLog('UD', e.toString());
			oSocket.disconnect();
		}
	});
	
	// wall activate
	oSocket.on('WA', function(xData) {
		try {
			var x = xData.x;
			var y = xData.y;
			var idClient = wsh.getData(oSocket, 'id');
			var oClient = oMWGame.getClient(idClient);
			var oEntity = oClient.getEntity();
			if (!oEntity) {
				return; // ignoring client without entity
			}
			var oInstance = oClient.getInstance();
			oInstance.wallActivate(oEntity, x, y);
		} catch (e) {
			serverLog('WA', e.toString());
			console.log(e.stack);
			oSocket.disconnect();
		}
	});
	
	/** 
	  * PA1 : Player Action 1 (attack)
	  * Le client a lancé une attaque
	  * params : chargetime int
	  */
	oSocket.on('PA1', function(xData) {
		try {
			var idClient = wsh.getData(oSocket, 'id');
			var oClient = oMWGame.getClient(idClient);
			var oEntity = oClient.getEntity();
			if (!oEntity) {
				return; // ignoring client without entity
			}
			var oInstance = oClient.getInstance();
			var nChargeTime= xData.t;
			oInstance.entityAttack(oEntity, nChargeTime);
		} catch(e) {
			serverLog('PA1', e.toString());
			console.log(e.stack);
			oSocket.disconnect();
		}
	});
	
	
	/** 
	  * PA2 : Player Action 2 (use item)
	  * Le client a utilisé un objet
	  */
	oSocket.on('PA2', function(xData) {
		try {
			var idClient = wsh.getData(oSocket, 'id');
			var oClient = oMWGame.getClient(idClient);
			var oEntity = oClient.getEntity();
			if (!oEntity) {
				return; // ignoring client without entity
			}
			var oInstance = oClient.getInstance();
			var nItem = xData.i;
			oInstance.entityUseItem(oEntity, nItem);
		} catch(e) {
			serverLog('PA2', e.toString());
			console.log(e.stack);
			oSocket.disconnect();
		}
	});	
	
	/** 
	  * PA2 : Player Action Drop (drop item)
	  * Le client a jeté un objet
	  */
	oSocket.on('PAD', function(xData) {
		try {
			var idClient = wsh.getData(oSocket, 'id');
			var oClient = oMWGame.getClient(idClient);
			var oEntity = oClient.getEntity();
			if (!oEntity) {
				return; // ignoring client without entity
			}
			var oInstance = oClient.getInstance();
			var nItem = xData.i;
			oInstance.entityDropItem(oEntity, nItem);
		} catch(e) {
			serverLog('PAD', e.toString());
			console.log(e.stack);
			oSocket.disconnect();
		}
	});

	
	
	/** 
	  * RR : Respawn Request
	  * Le client a lancé une requete de réaparition
	  */
	oSocket.on('RR', function(xData) {
		try {
			var idClient = wsh.getData(oSocket, 'id');
			var oClient = oMWGame.getClient(idClient);
			var oEntity = oClient.getEntity();
			if (!oEntity) {
				return; // ignoring client without entity
			}
			// le MWGame connait le point de respawn...
			oMWGame.respawnClient(idClient);
		} catch (e) {
			serverLog('RR', e.toString());
			console.log(e.stack);
			oSocket.disconnect();
		}
	});
	
	
	
	/**
	 * Message de chat
	 */
	oSocket.on('CM', function(xData) {
		try {
			var idClient = wsh.getData(oSocket, 'id');
			var oClient = oMWGame.getClient(idClient);
			var oInstance = oClient.getInstance();
			var oPacket = {m: xData.m, n: oClient.getName()};
			serverLog(oInstance.getName(), '> (m)', oPacket.n, ':', '"' + oPacket.m + '"');
			wsh.send(oInstance.getSockets(), 'CM', oPacket);
		} catch (e) {
			serverLog('CM', e.toString());
			console.log(e.stack);
			oSocket.disconnect();
		}
	});

	/**
	 * Fonction d'aide au débugage (cheat codes)
	 */
	oSocket.on('ZZ', function(xData) {
		try {
			var idClient = wsh.getData(oSocket, 'id');
			var oClient = oMWGame.getClient(idClient);
			oMWGame.debugCommand(idClient, xData.m);
			serverLog(oClient.getName(), 'used ZZ', xData.m);
		} catch (e) {
			serverLog('ZZ', e.toString());
			console.log(e.stack);
			oSocket.disconnect();
		}
	});
	
	/**
	 * Message de plugin
	 * Redirige le paquet vers le bon plugin
	 */
	oSocket.on('PM', function(xData) {
		try {
			var idClient = wsh.getData(oSocket, 'id');
			var oClient = oMWGame.getClient(idClient);
			var oInstance = oClient.getInstance();
			xData.client = oClient;
			oMWGame.sendSignal(xData.mod + '_' + xData.action, oInstance, xData);
		} catch (e) {
			serverLog('PM', e.toString());
			console.log(e.stack);
			oSocket.disconnect();
		}
	});
}


module.exports = {
	init: init,
	service: service
};
