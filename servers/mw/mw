#!/bin/bash

rc_dir=~/public_html/raycaster
server_dir=`pwd`
dest_dir=$server_dir/www/mw
server_mod_dir=$server_dir/node_modules/mwgame/modules
server_tests_dir=$server_dir/node_modules/mwgame/tests
module_dir=$rc_dir/modules/magewar
module_file=$module_dir/magewar.js


# supprime des fichier d'un répertoire si celui-ci en contient.
# param 1 chemin du répertoire à vider
rmFiles() {
	local nCount=`ls -1 $1 2>/dev/null|wc -l`
	if [ $nCount -gt 0 ]
	then
		rm $1/*
	fi
}


# nettoyage des répertoire de destination
# le répertoire de module
# et le répertoire document root de node
cleanDir() {
	echo "(i) reseting client module directory"
	if [ -d $module_dir ]
	then
		rm -r $module_dir
	fi
	if [ -d $dest_dir ]
	then
		rm -r $dest_dir/*
	fi
}

# empaquetage des fichiers clients,
# si un paramètre "pack" est spécifié, on compresse le tout.
buildProject() {
	echo "(i) build client side project"
	cd $rc_dir/dynamics/packer
	php -f build.php -- magewar nopack > /dev/null
	cd $server_dir

	rmFiles $server_mod_dir
}

# compression du projet
packProject() {
	echo "(i) packing client files"
	php -f ../../dynamics/packer/pack.php -- $module_file $module_file
}

# compie le module vers le répertoire web du server
importModule() {
	echo "(i) copying packed client files to node document root"
	rm -rf $dest_dir
	mkdir -p $dest_dir
	cp -ru $module_dir/* $dest_dir
}

# installation d'un plugin
# copie les fichiers client et les ressources
installPlugin() {
	echo -n "(i) installing plugin : $1 ("
	local plugin_path=mwplugins/$1

	if [ -d $plugin_path/client ]
	then
		echo -n "client "
		# accrocher les js au module principal
		cat $plugin_path/client/*.js >>$module_file

		if [ -d $plugin_path/client/resources ]
		then
			echo -n "resources "
			# copier les ressources
			cp -ru $plugin_path/client/resources $module_dir	
		fi
	fi
	if [ -d $plugin_path/server ]
	then
		echo -n "server "
		# copier la classe du serveur
		mkdir -p node_modules/$plugin_path
		cp -r $plugin_path/server/* node_modules/$plugin_path/
	fi
	echo "...done)"
}

listPlugins() {
	local plugin_path=mwplugins
	local avail_plugin_path=mwplugins_sources
	local i
	for i in `ls "$avail_plugin_path/"`
	do
		if [ -e "$plugin_path/$i" ]
		then
			echo -n "[X] "
		else
			echo -n "[ ] "
		fi
		echo "$i"
	done
}

# installer tous les plugins
installPlugins() {
	local i
	if [ ! -d node_modules/mwplugins ]
	then
		mkdir -p node_modules/mwplugins
	fi
	if [ ! -d mwplugins ]
	then
		echo
		return
	fi
	rm -r node_modules/mwplugins/*
	for i in `ls mwplugins`
	do
		installPlugin $i
	done
}


# effectue la compilation du projet source (import + pack)
goCompile() {
	printVersionToday node_modules/mwgame/version.js
	cleanDir
	buildProject
	installPlugins
	installMaps
	if [ "$1" = "pack" ]
	then
		packProject
	fi
	importModule
}

# compression de tout le dossier dans un tar.gz
goArchive() {
	local sFile="magewar.tar.gz"
	find . -name "*~" -delete
	if [ -f "$sFile" ]
	then
		rm $sFile
	fi
	tar -czf "$sFile" *
}

# gestion des plugins
goPlugin() {
	local sSubCommand="$1"
	if [ -n "$sSubCommand" ]
	then
		shift
	fi
	case "$sSubCommand" in
		"list")
			echo "(i) list of plugins"
			listPlugins
		;;

		"add")
			if [ -n "$1" -a -h "mwplugins/$1" ]
			then
				echo "(!) plugin $1 is already active"
			elif [ -n "$1" -a -e "mwplugins_sources/$1" ]
			then
				mkdir -p mwplugins
				ln -s "../mwplugins_sources/$1" "mwplugins/$1"
				echo "(i) added plugin $1"
			else
				echo "(!) cannot find plugin $1"
			fi
		;;

		"rem")
			if [ -n "$1" -a -h "mwplugins/$1" ]
			then
				rm mwplugins/$1
				echo "(i) removed plugin $1"
			else
				echo "(!) cannot find plugin $1"
			fi
		;;

		*)
			echo "!! no sub command spcified."
			echo " * $0 plugin list : list of active plugins (can be 'rem')"
			echo " * $0 plugin add <plugin> : add a plugin to the compilation list"
			echo " * $0 plugin rem <plugin> : remove a plugin from the compilation list"
		;;
	esac
}

goDeploy() {
	echo "(i) deploying $1"
	local sTag="$1"
	rm -rf build/*
	mkdir -p build/logs
	local i
	for i in "env/$sTag/*" node_modules www index.js runserver o876runserv.inc data
	do
		cp -r $i build/
	done
	echo "(i) archiving..."
	cd build
	local sArc=mwserver-$sTag.tar.gz
	tar -czf $sArc *
	mv -f $sArc ..
	cd ..
	echo "(i) cleaning temporary stuff..."
	rm -rf build/*
	goUpload $sArc
}

goUpload() {
	local sHost=ftp.laboralphy.org  #This is the FTP servers host or IP address.
	local sPath=/www/blightmagic/download/
	local sFtpuser             #This is the FTP user that has access to the server.
	local sPassword          #This is the password for the FTP user.

	read -p "type user name : " sFtpuser
	read -s -p "password for $sFtpuser : " sPassword
 	echo " "

	curl -T $1 ftp://$sFtpuser:$sPassword@$sHost$sPath
}

# Copy all maps into data/maps (json) & www/maptiles (resources)
installMaps() {
	local sTilePath="www/maptiles"
	local sDataPath="data/maps"
	local sExportPath="maps_sources"
	local i
	rm -r $sDataPath
	rm -r $sTilePath
	for i in `ls $sExportPath`
	do
		echo "(i) import map $i"
		mkdir -p $sTilePath
		mkdir -p $sDataPath
		cp -r $sExportPath/$i/data/map.json $sDataPath/$i.json
		cp -r $sExportPath/$i/tiles/* $sTilePath
	done
}

printVersionToday() {
	local sY=`date +%Y`
	local sY2=`expr $sY - 2015`
	local sM=`date +%m`
	local sD=`date +%d`
	local sD2=`expr $sD - 1`
	local sM2="`expr substr ABCDEFGHIJKLMNOPQRSTUVWXYZ $sM 1`"
	local sDate=$sY2$sM2$sD2
	if [ -n "$1" ]
	then
		echo "module.exports = '$sDate ($sY-$sM-$sD)';" > $1
	else
		echo "$sDate ($sY-$sM-$sD)"
	fi
}

if [ "$BASH" = "/bin/bash" ]
then
	case $1 in
		"run")
			goCompile
			chmod +x runserver
			./runserver
		;;

		"build")
			goCompile pack
			echo "(i) compilation done"
		;;

		"deploy")
			goCompile pack
			shift
			goDeploy $*
			echo "(i) deployment done" 
		;;

		"plugin")
			shift
			goPlugin $*
		;;

		"test")
			cd node_modules/mwgame/tests
			node testmwgame.js
			cd ../../..
		;;

		"peekversion")
			printVersionToday $2
		;;

		*)
			echo "!! no command specified."
			echo " * run : project compilation and execution"
			echo " * build : project compilation and packing"
			echo " * deploy <env> : project building and deployment using specified environement"
			echo " * plugin <cmd> <name> : plugin management"
			echo " * test : project testing"
			echo " * peekversion : check project version number"
		;;
	esac
else
	echo " "
	echo "/!\\ Executing this script requires /bin/bash"
	echo "try 'bash $0'"
	echo " "
fi
