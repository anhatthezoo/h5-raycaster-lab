/**
 * Classe Client
 * Gestion d'un client et de ses données associée
 */
var O2 = require('o2');

O2.createClass('Client', {
	_id: 0, // identifiant client
	_sName: '', // pseudonyme client
	_oSocket: null, // websocket associée au client
	_oInstance: null,	// nom de la partie auquel le client se connecte
	_oEntity: null, // identifiant de l'entité associée
	_bReady: false, // indique que le client à envoyé son message RY
	_dConnect: null, // time of connection
	
	__construct: function() {
		this._dConnect = new Date();
	},
	
	/**
	 * Return the connection date object
	 * @return Date
	 */
	getConnectionTime: function() {
		return this._dConnect;
	},
	
	/**
	 * getter / setter d'identifiant
	 */
	setId: function(id) {
		this._id = id;
	},

	getId: function() {
		return this._id;
	},
	
	
	/**
	 * getter / setter du pseudo du client
	 */
	setName: function(n) {
		if (n.length < 2) {
			throw new Error('invalid client Name : ' + n);
		}
		this._sName = n;
	},

	getName: function() {
		return this._sName;
	},
	
	/**
	 * getter / setter de la websocket
	 */
	setSocket: function(s) {
		this._oSocket = s;
	},
	
	getSocket: function() {
		return this._oSocket;
	},
	
	/**
	 * getter / setter de la partie
	 */
	setInstance: function(g) {
		this._oInstance = g;
		this.setReady(false);
	},
	
	getInstance: function() {
		return this._oInstance;
	},
	
	/**
	 * getter / setter de l'entité associée
	 */
	setEntity: function(e) {
		if (this._oEntity) {
			this._oEntity.setData('idClient', 0);
		}
		this._oEntity = e;
		if (e) {
			e.setData('idClient', this.getId());
		}
	},
	
	getEntity: function() {
		return this._oEntity;
	},
	
	getStatus: function() {
		var oStatus = {
			id: this._id,
			name: this._sName,
			instance: this._oInstance ? this._oInstance.getId() : 0,
			entity: this._oEntity ? this._oEntity.id : 0
		};
		return oStatus;
	},
	
	/**
	 * Renvoie les sockets de tous les autres client de l'instance
	 */
	getOtherClientSockets: function() {
		var nMyId = this._id;
		return this
			.getInstance()
			.getClients()
			.map(function(c) {
				return c._id != nMyId ? c.getSocket() : null;
			});
	},
	
	setReady: function(b) {
		this._bReady = b;
	},
	
	isReady: function() {
		return this._bReady;
	}
});

module.exports = Client;
