test('basic', function(assert) {
	var ep = new ADV.EffectProcessor();
	assert.ok(ep);
});


test('simple effect', function(assert) {
	var ep = new ADV.EffectProcessor();
	var oSoul = {
		_aEffects: [],
	};
	var oEntity = {
		getSoul: function() { return oSoul; }
	};
	var oEffect = {
		cast: function() {
			oSoul.myNewEffect = 1;
		},
		run: function() {
			oSoul.myRunningEffect = oSoul.myRunningEffect || 0;
			++oSoul.myRunningEffect;
		},
		expire: function() {
			oSoul.myNewEffect = 2;
		},
		accept: function() {
			return true;
		},
		getDurationType: function() { return 1; },
		getTarget: function() { return oEntity; },
		isExpired: function(nTime) {
			return nTime > 9;
		}
	};
	
	ep.applyEffect(oEffect);
	assert.equal(ep._aEffects.length, 1, 'there is one effect');
	assert.equal(ep._aEffects[0], oEffect, 'and this effect is...');
	assert.equal(ep._aEffects[0].getTarget(), oSoul, 'this effect has been cast on soul');
	assert.equal(oSoul._aEffects.length, 1, 'effect is on soul too');
	assert.equal(oSoul.myNewEffect, 1, 'this effect has been cast');
	ep.processEffects();
	assert.equal(ep._nTime, 1, 'time is running');
	assert.equal(oSoul.myRunningEffect, 1, 'this effect is running 1');
	ep.processEffects();
	ep.processEffects();
	ep.processEffects();
	ep.processEffects();
	ep.processEffects();
	ep.processEffects();
	ep.processEffects();
	ep.processEffects();
	ep.processEffects();
	assert.equal(oSoul.myRunningEffect, 9, 'this effect is running 9');
	assert.equal(oSoul.myNewEffect, 2, 'this effect is expired');
	assert.equal(ep._aEffects.length, 0, 'effect is over');
	assert.equal(oSoul._aEffects.length, 0, 'effect is over');
});
