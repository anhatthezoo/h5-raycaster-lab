


test('basic', function(assert) {
	var g = new Instance();
	assert.deepEqual(g._aClients, [], 'client array initialisation');
});


test('add / remove client', function(assert) {
	var g = new Instance();
	var c4 = {
			getId: function() {
				return 4;
			},
			setInstance: function() {},
			getSocket: function() { return 1; }
		};
	var c6 = {
			getId: function() {
				return 6;
			},
			setInstance: function() {},
			getSocket: function() { return 1; },
		};
	g.addClient(c4);
	g.addClient(c6);
	assert.equal(g._aClients[0], c4, 'client 4 insertion');
	assert.equal(g._aClients[1], c6, 'client 6 insertion');
	assert.equal(g._aClients.length, 2, '3 clients added so far');
	g.removeClient(c4);
	assert.equal(g._aClients.length, 1, '1 client remains');
	assert.equal(g._aClients[0], c6, 'client 4 removal, client 6 remains');
	g.removeClient(c6);
	assert.equal(g._aClients.length, 0, 'no more client');
});


test('Instance data', function(assert) {
	var g = new Instance();
	
	var m = g._oMapper;
	m.setPalette('test', {
		background: 'resources/tiles/textures/s00.png',
		walls: 'resources/tiles/textures/w00.png',
		flats: 'resources/tiles/textures/f00.png',
		tags: {
			1: 'test tag t1',
			2: 'test tag t2'
		},
		blocks: {
			0: { 
				w: null,
				f: [0, 1],
				c: m.BLOCK.VOID,
				o: 0
			},
			1: { 
				w: [0, 0],
				f: null,
				c: m.BLOCK.SOLID_WALL,
				o: 0
			}
		}
	});
	
	
	var aMap = [
	            [1, 1, 1, 1],
	            [1, 0, 0, 1],
	            [1, 0x100, 0x200, 1],
	            [1, 1, 1, 1]
	            ];
	m.setMap('testmap', aMap, 'test', 'normal');
	g.loadData('testmap');

	assert.ok(!g.isWalkable(0, 0));
	assert.ok(g.isWalkable(1, 1));
	assert.ok(g.isWalkable(1, 2));
	assert.ok(g.isWalkable(2, 2));

	assert.ok(g.clip(46, 6));
	assert.ok(!g.clip(96, 96));
	assert.ok(!g.clip(96, 160));
	assert.ok(!g.clip(160, 165));
});

