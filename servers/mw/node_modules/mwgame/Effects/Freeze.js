var O2 = require('o2');
var Effect = require('./Abstract/Effect.js');

// Gèle les potions
// On ne peut plus les utiliser tant que l'attribut frozen est élevé
var ADV_Effect_Freeze = O2.extendClass(Effect, {
	
	__construct: function() {
		O2.parent(this, 'Freeze', 'curse');
		this.setLevel(100);
	},
	
	accept: function(ep) {
		var oEntity = this.getTarget();
		return !!oEntity.getData('inventory');
	},
	
	cast: function(ep) {
		var oEntity = this.getTarget();
		oEntity.getSoul().setBonus('frozen', this.getLevel());
		if (oEntity.getSoul().getAttribute('frozen') > 0) {
			oEntity.getData('inventory').aBagSlots.forEach(function(o, iItem) {
				if ((!!o) && (o.type === 'potion')) {
					o.frozen = true;
				};
			});
			// envoyer les frozen
			oEntity.getThinker().oGame.sendSignal('entityPickUpItem', { e: oEntity, i: [], f: false });
		}
	},
	
	expire: function(ep) {
		var oEntity = this.getTarget();
		oEntity.getSoul().setBonus('frozen', -this.getLevel());
		if (oEntity.getSoul().getAttribute('frozen') <= 0) {
			oEntity.getData('inventory').aBagSlots.forEach(function(o, iItem) {
				if ((!!o) && (o.type === 'potion')) {
					o.frozen = false;
				};
			});
			// envoyer les frozen
			oEntity.getThinker().oGame.sendSignal('entityPickUpItem', { e: oEntity, i: [], f: false });
		}
	},
});

module.exports = ADV_Effect_Freeze;
